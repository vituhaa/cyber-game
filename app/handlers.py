from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from DataBase.Tables.HintTable import *
from DataBase.Tables.RoomParticipants import *
from DataBase.Tables.RoomTable import *
from DataBase.Tables.RoomTasksTable import *
from DataBase.Tables.TaskTable import *
from DataBase.Tables.TaskTypeTable import *
from DataBase.Tables.TaskAttemptsTable import *
from DataBase.Tables.UserTable import *


import app.keyboards as keyboards

router = Router()

class User(StatesGroup): # user data for registration
    name = State()

class Task(StatesGroup):
    type = State()

class Answer(StatesGroup):
    answer = State()
    answer_type = State()


@router.message(CommandStart())
async def command_start(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user_name = await get_user_name_from_db(user_id)
    await state.update_data(user_id=user_id)

    if user_name and user_name != "–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ":
        await message.answer(f'–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞, {user_name}!', reply_markup=keyboards.main_menu)
        await send_game_rules(message)
        await state.clear()
    else:
        await message.answer(
            '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫–∏–±–µ—Ä-–∏–≥—Ä–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ù–ò–£ –í–®–≠.\n'
            '–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Ä–µ—à–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏, —Ä–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å —à–∏—Ñ—Ä—ã '
            '–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'
        )
        await state.set_state(User.name)
        await message.answer('–ü—Ä–µ–∂–¥–µ —á–µ–º –∏–≥—Ä–∞—Ç—å, –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')


async def register_user(user_id: int, name: str) -> bool:
    print(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –∏–º–µ–Ω–µ–º '{name}'")
    try:
        get_or_create_user(user_id, name)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    
async def get_user_name_from_db(user_id: int) -> str:
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        name = get_username_by_tg_id(user_id)
        return name if name else "–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return "–û—à–∏–±–∫–∞"

@router.message(Command('help')) # /help
async def send_game_rules(message: Message):
    await message.answer('–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã. –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —à–∏—Ñ—Ä—ã, —Ä–µ—à–∞—è –∑–∞–¥–∞—á–∏.\n\
        \n‚≠êÔ∏è  –ó–∞ –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ß–µ–º –±–æ–ª—å—à–µ –∏ —Ç—Ä—É–¥–Ω–µ–µ —Ä–µ—à–∏—Ç–µ, —Ç–µ–º –≤—ã—à–µ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.\
        \nüí°  –£ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏. –ü—Ä–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ—à–µ–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç—Å—è.\
        \nüíØ  –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É".\n\
        \n–í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö.\
        \n–î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã:\
        \n‚ùìÔ∏è  "–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞" - –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –í–∞–º –ª—é–±—É—é –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã.\
        \n‚úîÔ∏è  "–ó–∞–¥–∞—á–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" - –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è –∑–∞–¥–∞—á—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ –∏ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\
        \n–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Å—Ç—è–∑–∞—Ç—å—Å—è –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å.\
 –ë–æ—Ç —Å–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.\
        \n–¢–∞–∫–∞—è –∏–≥—Ä–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–º–∏ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.\
        \nüèÜ  –ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å - –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ".\n\
        \n–ù–∞–ø–∏—à–∏—Ç–µ /help —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ —É–≤–∏–¥–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞')
    
@router.message(User.name)
async def get_user_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text) # save username in User field name
    
    registration_success = await register_user(user_id=message.from_user.id, name=message.text)
    
    user_name = await get_user_name_from_db(message.from_user.id)
    
    if registration_success:
        await message.answer(f'{user_name}, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=keyboards.main_menu) # open keyboard for user
        await send_game_rules(message)
    else:
        await message.answer('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!')
    await state.clear() # clear states

# tap on button "task from category"
@router.message(F.text == '–ó–∞–¥–∞—á–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def task_from_category(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏', reply_markup=keyboards.task_from_category) # choosing complexity 

# if we choose any complexity, then we have a keyboard with choosing type of task
@router.callback_query(F.data == 'easy')
async def easy(callback: CallbackQuery, state: FSMContext):
    await state.update_data(complexity='–ª—ë–≥–∫—É—é')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏', reply_markup=keyboards.choosing_type_of_task)
    await state.set_state(Task.type)

@router.callback_query(F.data == 'normal')
async def normal(callback: CallbackQuery, state: FSMContext):
    await state.update_data(complexity='—Å—Ä–µ–¥–Ω—é—é')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏', reply_markup=keyboards.choosing_type_of_task)
    await state.set_state(Task.type)

@router.callback_query(F.data == 'hard')
async def hard(callback: CallbackQuery, state: FSMContext):
    await state.update_data(complexity='—Å–ª–æ–∂–Ω—É—é')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏', reply_markup=keyboards.choosing_type_of_task)
    await state.set_state(Task.type)


async def giving_task_from_category(callback: CallbackQuery, state: FSMContext, complexity: str, type_name: str):
    """
    complexity: —Å—Ç—Ä–æ–∫–∞ '–ª—ë–≥–∫—É—é', '—Å—Ä–µ–¥–Ω—é—é', '—Å–ª–æ–∂–Ω—É—é'
    """
    type_name_map = {
        "—à–∏—Ñ—Ä–æ–≤–æ–≥–æ": "cipher",
        "—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ": "symbol"
    }

    difficulty_map = {'–ª—ë–≥–∫—É—é': 1, '—Å—Ä–µ–¥–Ω—é—é': 2, '—Å–ª–æ–∂–Ω—É—é': 3}
    difficulty = difficulty_map.get(complexity)
    print(f"[DEBUG] giving_task_from_category: complexity='{complexity}' -> difficulty={difficulty}, type_name='{type_name}'")

    if difficulty is None:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏.")
        return

    db_type_name = type_name_map.get(type_name)
    if db_type_name is None:
        await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏.")
        return

    type_id = get_type_id_by_name(db_type_name)
    print(f"[DEBUG] giving_task_from_category: type_id –¥–ª—è '{db_type_name}' = {type_id}")

    if type_id is None:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    print(f"[DEBUG] giving_task_from_category: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É —Å type_id={type_id} –∏ difficulty={difficulty}")
    task = get_task_by_category_and_difficulty(type_id, difficulty)
    print(f"[DEBUG] giving_task_from_category: –∑–∞–¥–∞—á–∞ –∏–∑ –±–∞–∑—ã: {task}")

    if task is None:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")
        return

    task_id, title, type_id, difficulty, description, question, correct_answer, solution = task[:8]

    await state.update_data(task_id=task_id)
    await state.update_data(user_id=callback.from_user.id)
    await state.update_data(hint_count=0, hints_exhausted=False)

    task_text = (
        f"üìå *{title}*\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
        f"‚ùì *–í–æ–ø—Ä–æ—Å:* {question}\n\n"
        f"(–í–≤–µ–¥–∏—Ç–µ –í–∞—à –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)"
    )
    await callback.message.answer(task_text, parse_mode='Markdown')
    await state.set_state(Answer.answer)


async def get_task_solution_from_db(task_id: int) -> str:
    try:
        solution = get_task_solution(task_id)
        return solution if solution else "–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è."


@router.callback_query(Task.type)
async def choose_type(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    complexity = data.get('complexity')
    print(f"[DEBUG] choose_type: complexity –∏–∑ state = '{complexity}'")


    tmp_type = callback.data
    if tmp_type == 'symbol':
        type_name = "—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ"
    else:
        type_name = "—à–∏—Ñ—Ä–æ–≤–æ–≥–æ"

    await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {complexity} –∑–∞–¥–∞—á—É {type_name} —Ç–∏–ø–∞. \n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...')
    await state.update_data(user_id=callback.from_user.id)

    await giving_task_from_category(callback, state, complexity, type_name)



@router.message(F.text == '–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞')
async def task_from_category(message: Message, state: FSMContext):
    await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É. \n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...')

    task = get_random_task()
    print(task)
    if task is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    task_id, title, type_id, difficulty, description, question, correct_answer, solution = task[:8]

    await state.update_data(task_id=task_id)
    await state.update_data(user_id=message.from_user.id)
    await state.update_data(hint_count=0, hints_exhausted=False)

    task_text = (
        f"üìå *{title}*\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
        f"‚ùì *–í–æ–ø—Ä–æ—Å:* {question}\n\n"
        f"(–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)"
    )
    await message.answer(task_text, parse_mode='Markdown')
    await state.set_state(Answer.answer)



async def giving_hint(state: FSMContext) -> str:
    data = await state.get_data()
    task_id = data.get("task_id")
    hint_count = data.get("hint_count", 0)  # hint_count —É–∂–µ —É–≤–µ–ª–∏—á–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–µ
    hints_exhausted = data.get("hints_exhausted", False)
    
    if hints_exhausted:
        return "üîí –í—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!"

    hint = get_hint_by_taskid_ordernum(task_id, hint_count)
    if hint:
        text, penalty = hint
        return f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {text}\n\nüí∏ –®—Ç—Ä–∞—Ñ: -{penalty} –±–∞–ª–ª–æ–≤"
    else:
        return "üîí –í—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!"

async def are_there_any_hints(task_id: int, hint_count: int) -> bool: # checking hints
    hint = get_hint_by_taskid_ordernum(task_id, hint_count + 1)
    return hint is not None
    
@router.callback_query(F.data == "yes")
async def getting_hint(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    task_id = data.get("task_id")
    hint_count = data.get("hint_count", 0)
    hints_exhausted = data.get("hints_exhausted", False)
    
    if hints_exhausted:
        await callback.message.answer(
            "üîí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏—Å—Å—è–∫–ª–æ. –°–¥–∞—Ç—å—Å—è?",
            reply_markup=keyboards.exit_game_after_hints_turn_zero
        )
        await callback.answer()
        return
    
    if not await are_there_any_hints(task_id, hint_count):
        await state.updade_data(hints_exhausted=True)
        await callback.message.answer(
            "üîí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏—Å—Å—è–∫–ª–æ. –°–¥–∞—Ç—å—Å—è?",
            reply_markup=keyboards.exit_game_after_hints_turn_zero
        )
        await callback.answer()
        return

    hint_count += 1
    await state.update_data(hint_count=hint_count)
    hint = get_hint_by_taskid_ordernum(task_id, hint_count)
    if hint:
        text, penalty = hint
        update_user_score(user_id, -penalty)
        print(user_id, penalty)
        await callback.message.answer(
            f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {text}\n\nüí∏ –®—Ç—Ä–∞—Ñ: -{penalty} –±–∞–ª–ª–æ–≤"
        )
    else:
        await state.update_data(hints_exhausted=True)
        await callback.message.answer(
            "üîí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏—Å—Å—è–∫–ª–æ. –°–¥–∞—Ç—å—Å—è?",
            reply_markup=keyboards.exit_game_after_hints_turn_zero
        )
    await state.set_state(Answer.answer)
    await callback.answer()



@router.callback_query(F.data == "give_up")
async def giving_up(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    task_id = data.get("task_id")
    
    solution = await get_task_solution_from_db(task_id)
    
    await callback.message.answer(f"–í–æ—Ç —Ä–∞–∑–±–æ—Ä —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:\n{solution}")
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º.")
    await state.clear()


@router.message(Answer.answer)
async def comparing_answer(message: Message, state: FSMContext):
    user_answer = message.text.strip()
    data = await state.get_data()
    task_id = data.get("task_id")
    hint_count = data.get("hint_count", 0)
    hints_exhausted = data.get("hints_exhausted", False)

    if task_id is None:
        await message.answer("–û—à–∏–±–∫–∞: ID –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–¥–∞—á
    if check_answer(task_id, user_answer):
        # 1) –ë–µ—Ä—ë–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î (1, 2 –∏–ª–∏ 3)
        difficulty = get_task_difficulty(task_id)
        if difficulty is None:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å difficulty
            difficulty = 1

        # 2) –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
        score_delta = difficulty * 100

        # 3) –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¥–æ–±–∞–≤–ª—è–µ–º score_delta –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º solved_count
        update_user_score(
            user_tg_id=message.from_user.id,
            score_delta=score_delta,
            increment_solved=True
        )

        # 4) –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –∏–∑ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        solution = await get_task_solution_from_db(task_id)

        await message.answer(
            f"‚úÖ –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {score_delta} –±–∞–ª–ª–æ–≤ –∏ +1 –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.\n"
            f"–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º."
        )
        await message.answer(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n{solution}")
        await state.clear()

    else:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏ –µ—Å—Ç—å –µ—â—ë –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if not hints_exhausted and await are_there_any_hints(task_id, hint_count):
            await message.answer(
                "‚ùå –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É.",
                reply_markup=keyboards.choosing_hint_or_not
            )
        else:
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            await state.update_data(hints_exhausted=True)
            await message.answer(
                "‚ùå –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π!\n"
                "üîí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏—Å—Å—è–∫–ª–æ. –°–¥–∞—Ç—å—Å—è?",
                reply_markup=keyboards.exit_game_after_hints_turn_zero
            )

# statistics 
async def get_stats_info(user_id: int) -> str:
    user_stats = get_user_stats(user_id)

    if user_stats:
        user_rating, solved_count = user_stats

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        with connect() as conn:
            cur = conn.cursor()
            cur.execute("""
                SELECT COUNT(*) + 1
                FROM User
                WHERE rating > (
                    SELECT rating FROM User WHERE user_tg_id = ?
                )
            """, (user_id,))
            place_row = cur.fetchone()
            place = place_row[0] if place_row else 0

        statistics = f"{place}+{solved_count}"
        return statistics
    else:
        return '0'  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ
          
@router.message(F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
async def check_statistics(message: Message):
    user_id = message.from_user.id
    # ZAGLUSHKA for checking statistics
    statistics = await get_stats_info(user_id)
    
    if statistics != '0':
        stats_data = statistics.split('+')
        place = int(stats_data[0])
        count_tasks = stats_data[1]
        name = await get_user_name_from_db(user_id)
        
        emoji = ''
        if place == 1:
            emoji = 'ü•á'
        elif place == 2:
            emoji = 'ü•à'
        elif place == 3:
            emoji = 'ü•â'
        else:
            emoji = 'üîπÔ∏è'
        await message.answer(f'{name}, –≤–æ—Ç –í–∞—à–∞ –∏–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
                            f'{emoji}  –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ –∏–≥—Ä–æ–∫–æ–≤: {place}\n'
                            f'‚úÖÔ∏è  –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {count_tasks}')
        