from aiogram.types import ReplyKeyboardRemove
from app.handlers import *
import asyncio
from aiogram import Bot
from DataBase.DBConnect import connect
from typing import Optional
from DataBase.Tables.RoomTable import finish_room as async_finish_room
from DataBase.Tables.RoomTable import create_room as db_create_room
from aiogram.fsm.storage.base import StorageKey, BaseStorage
import app.keyboards as keyboards

comp_router = Router()

class Join_Closed_Room(StatesGroup): # join the closed room
    password = State()
    
class Create_Room(StatesGroup): # create room
    room_type = State() # opened/closed
    count_tasks = State() # in room

class Room_States(StatesGroup):
    in_room = State()
    
class CompetitionStates(StatesGroup):
    waiting_for_answer = State()

room_events: dict[int, asyncio.Event] = {} #room_id –∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞


async def create_room_in_db(user_id: int, is_closed: bool) -> Optional[int]:
    res = get_user_by_tg(user_id)
    if not res:
        print(f"[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    room_id = db_create_room(user_id,is_closed)
    if room_id:
        print(f"[SUCCESS] –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞. ID: {room_id}")
        return room_id
    



async def notify_new_participant(room_id: int, new_user_id: int, bot: Bot):
    try:
        new_user_name = get_username_by_tg_id(new_user_id)
        existing_participants = get_room_participants_without_news(room_id,new_user_id)

        if existing_participants:
            participants_list = "üë• –£–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ:\n" + "\n".join(f"‚Ä¢ {name}" for name in existing_participants)
            await bot.send_message(
                new_user_id,
                f"{participants_list}"
            )
        else:
            await bot.send_message(
                new_user_id,
                "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è."
            )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if existing_participants:
            message = f"üéâ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {new_user_name}"
            user_ids = get_room_users_id(room_id)
            for user_id in user_ids:
                if user_id != new_user_id:
                    try:
                        await bot.send_message(user_id, message)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ notify_new_participant: {e}")


async def get_room_users(room_id: int) -> list[str]:
    return get_room_participants_without_news(room_id,0) #–≤–º–µ—Å—Ç–æ new_user_id –ø—Ä–æ—Å—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π id

async def add_user_in_random_room(user_id: int) -> Optional[int]:
    room_id = find_open_room()
    if room_id:
        join_room(user_id, room_id)
        return room_id
    return None


# def check_db_structure():
#     with connect() as conn:
#         cur = conn.cursor()
#         print("\n[–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î]")

#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã User
#         cur.execute("PRAGMA table_info(User)")
#         print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ User:", cur.fetchall())

#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã Room
#         cur.execute("PRAGMA table_info(Room)")
#         print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Room:", cur.fetchall())

#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         cur.execute("SELECT id, user_tg_id FROM User WHERE user_tg_id = ?", (929645294,))
#         user = cur.fetchone()
#         print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 929645294: {user}")

# def check_db_permissions():
#     try:
#         with connect() as conn:
#             cur = conn.cursor()
#             cur.execute("CREATE TABLE IF NOT EXISTS test_table (id INTEGER)")
#             cur.execute("DROP TABLE test_table")
#             print("[–ü—Ä–æ–≤–µ—Ä–∫–∞] –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ë–î: OK")
#     except Exception as e:
#         print(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")

async def add_user_in_closed_room(user_id: int, password: str) -> Optional[int]:
    room_id = get_room_id_by_key(password)
    if room_id:
        join_room(user_id, room_id)
        return room_id
    return None

async def deleting_user_from_competition(user_id: int, message: Message, state: FSMContext) -> bool:
    room_id = get_room_id_for_user(user_id)
    if room_id:
        remove_participant_from_room(room_id,user_id)

        res = get_room_participant_count(room_id)
        if res == 0:
            # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–µ
            await async_finish_room(
                room_id=room_id,
                bot=message.bot,  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
                storage=state.storage
            )
        
        return True
    return False

async def save_task_in_room(room_id: int, task_id: int) -> bool:
    try:
        add_task_to_room(room_id, task_id)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–º–Ω–∞—Ç—É: {e}")
        return False


@comp_router.message(F.text == '–ù–∞—á–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ')
async def start_competition(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        room_id = data.get('room_id')
        count_tasks = data.get('count_tasks', 3)

        if not room_id:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç—É")
            return

        participants = get_room_users_id(room_id)
        if not participants:
            await message.answer("‚ö†Ô∏è –í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        participants_names = get_room_participants(room_id)
        participants_list = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:\n" + "\n".join(f"‚Ä¢ {name}" for name in participants_names)

        for participant_id in participants:
            try:
                await bot.send_message(
                    participant_id,
                    f"üèÅ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n{participants_list}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {count_tasks}",
                    reply_markup=keyboards.exit_competition
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant_id}: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ
        await run_competition_tasks(bot, room_id, participants, state, state.storage)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def run_competition_tasks(
        bot: Bot,
        room_id: int,
        users: list[int],
        state: FSMContext,
        storage: BaseStorage
):
    data = await state.get_data()
    count_tasks = data.get("count_tasks", 3)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –∫–∞–∫ 'active'
    start_game(room_id)

    for curr_index in range(1, count_tasks + 1):
        task = None
        max_attempts = 20  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª

        for _ in range(max_attempts):
            candidate = get_random_task()
            if not candidate:
                continue

            task_id, title, *_ = candidate
            if not is_in_room(room_id, task_id):
                task = candidate
                break  # –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∑–∞–¥–∞—á—É

        if not task:
            await bot.send_message(users[0], "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É.")
            continue

        task_id, title, *_ = task
        add_task_to_room(room_id, task_id)

        description = task[4]
        question = task[5]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_answer –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for user_id in users:
            participants = get_room_users_id(room_id)
            if not (user_id in participants):
                continue
            try:
                await bot.send_message(
                    user_id,

                    f"üìù –ó–∞–¥–∞–Ω–∏–µ {curr_index}/{count_tasks}\n\nüìå *{title}*\n\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description} \n\n*‚ùì –í–æ–ø—Ä–æ—Å:* {question} \n\n (–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)",
                    parse_mode='Markdown'
                )

                key = StorageKey(
                    chat_id=user_id,
                    user_id=user_id,
                    bot_id=bot.id
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ storage
                await storage.set_state(key=key, state=CompetitionStates.waiting_for_answer)
                await storage.set_data(key=key, data={
                    "room_id": room_id,
                    "task_id": task_id
                })

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        event = asyncio.Event()
        room_events[room_id] = event

        try:
            await asyncio.wait_for(event.wait(), timeout=15)
            participants = get_room_users_id(room_id)
            for user_id in participants:
                key = StorageKey(
                    chat_id=user_id,
                    user_id=user_id,
                    bot_id=bot.id
                )
                await storage.set_state(key=key, state=None)
        except asyncio.TimeoutError:
            pass  # –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        finally:
            room_events.pop(room_id, None)  # –æ—á–∏—Å—Ç–∏–º –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞
        
        await asyncio.sleep(2)

    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    participants = get_room_users_id(room_id)
    for user_id in participants:
        try:
            key = StorageKey(
                chat_id=user_id,
                user_id=user_id,
                bot_id=bot.id
            )
            await storage.set_state(key=key, state=None)
            await storage.set_data(key=key, data={})
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}. –í—ã–∑—ã–≤–∞–µ–º show_final_results...")
    await show_final_results(bot, room_id, users, state)



async def increase_score(user_id: int, room_id: int, score_delta: int = 100):
    try:
        update_player_score(user_id, room_id, score_delta)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        return False

async def notify_room_members(bot: Bot, room_id: int, message: str, exclude_user_id: int = None):
    user_ids = get_room_users_id(room_id)
    for user_id in user_ids:
        if user_id != exclude_user_id:
            try:
                await bot.send_message(user_id, message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def add_creator_in_room(room_id: int) -> bool:
    try:
        creator_id = get_room_creator(room_id)
        if not creator_id:
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        join_room(creator_id, room_id)
        return True

    except Exception as e:
        print(f"Error adding creator to room: {e}")
        return False

def calculate_score(difficulty: int) -> int:
    return {1: 100, 2: 200, 3: 300}.get(difficulty, 100)


async def get_last_task_in_room_from_db(room_id: int) -> Optional[tuple]:
    task_id = get_last_task_in_room(room_id)
    if not task_id:
        return None
    return get_task_by_id(task_id)


@comp_router.message(CompetitionStates.waiting_for_answer)
async def handle_competition_answer(message: Message, state: FSMContext):


    if message.text == '–í—ã–π—Ç–∏ –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è':
        await exit_competition(message, state)
        return

    try:
        user_id = message.from_user.id
        user_answer = message.text.strip()
        data = await state.get_data()

        room_id = data.get("room_id")
        task_id = data.get("task_id")

        if not room_id or not task_id:
            await message.answer("‚õî –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return

        room_status_row = get_room_status(room_id)
        if not room_status_row:
            await message.answer("‚õî –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        room_status = room_status_row[0]

        if room_status != 'active':
            await message.answer("‚õî –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            await state.clear()
            return

        task_data = get_task_by_id(task_id)

        if not task_data:
            await message.answer("‚õî –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        _, title, _, difficulty, *_ = task_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if check_answer(task_id, user_answer):
            # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            score = calculate_score(difficulty)

            save_attempt(user_id,task_id,1,0)
            update_player_score(user_id,room_id,score)
            update_user_score(user_id,score,True)

            await message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! +{score} –±–∞–ª–ª–æ–≤")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–Ω —Å–∞–º)
            # participants ‚Äî —Å–ø–∏—Å–æ–∫ user_id –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
            participants = get_room_users_id(room_id)
            for participant_id in participants:
                if participant_id != user_id:
                    try:
                        user_name = get_username_by_tg_id(user_id)
                        await message.bot.send_message(
                        participant_id,
                        f"üéØ –£—á–∞—Å—Ç–Ω–∏–∫ {user_name} –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏–ª –∑–∞–¥–∞—á—É '{title}'!\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É"
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant_id}: {e}")
            
            event = room_events.get(room_id)
            if event and not event.is_set():
                event.set()

        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            save_attempt(user_id,task_id,0,0)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞")
        await state.clear()


async def show_final_results(bot: Bot, room_id: int, users: list[int], state: FSMContext):
    participants = get_room_participants_with_score(room_id)
    results = {}
    for name, score in participants:
        if score not in results:
            results[score] = []
        results[score].append(name)

    message_lines = ["üèÜ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:"]
    for place, (score, names) in enumerate(sorted(results.items(), reverse=True), start=1):
        medal = {1: 'ü•á', 2: 'ü•à', 3: 'ü•â'}.get(place, '‚ñ´Ô∏è')
        names_str = ", ".join(names)
        message_lines.append(f"{medal} {place}. {names_str} ‚Äî {score} –±–∞–ª–ª–æ–≤")

    result_message = "\n".join(message_lines)

    for user_id in users:
        try:
            participants = get_room_users_id(room_id)
            if not (user_id in participants):
                continue
            await bot.send_message(
                user_id,
                result_message,
                reply_markup=keyboards.main_menu
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await async_finish_room(
        room_id=room_id,
        bot=bot,
        storage=state.storage)

@comp_router.message(F.text == '–í—ã–π—Ç–∏ –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è')
async def exit_competition(message: Message, state: FSMContext):

    try:
        user_id = message.from_user.id
        room_id = get_room_id_for_user(user_id)

        if not room_id:
            await message.answer("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ")
            return


        success = await deleting_user_from_competition(
            user_id=user_id,
            message=message,
            state=state
        )

        if not success:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è")
            return
   
        await state.clear()
  
        user_name = get_user_name_from_db(user_id)

        participants_count = get_room_participant_count(room_id)
        if participants_count > 0:
            await notify_room_members(
                bot=message.bot,
                room_id=room_id,
                message=f"‚ö† –£—á–∞—Å—Ç–Ω–∏–∫ {user_name} –ø–æ–∫–∏–Ω—É–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"
            )

        await message.answer(
            '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è!',
            reply_markup=ReplyKeyboardRemove()
        )
        await message.answer(
            '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=keyboards.main_menu
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã")
        await state.clear()


@comp_router.message(F.text == '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ')
async def choose_comp_format(message: Message):
    await message.answer('–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n'
                         '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö.\n–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–±–æ—Ä:'
                         , reply_markup=keyboards.actions_with_room) # choosing competition format
    
@comp_router.callback_query(F.data == 'join_room')
async def choose_join_room_type(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üîì  –ï—Å–ª–∏ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–Ω–∞—Ç—É, –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç –í–∞—Å –∫ –∏–≥—Ä–µ —Å –ª—é–±—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n'
                                  'üîê  –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ö–æ–¥–∞ –ø–æ –∫–æ–¥—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ, –≤ –∫–æ—Ç–æ—Ä—É—é –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏.\n'
                                  , reply_markup=keyboards.room_security)
    
@comp_router.callback_query(F.data == 'create_room')
async def choose_create_room_type(callback: CallbackQuery):
    await callback.message.answer('üîì  –ï—Å–ª–∏ –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É, –∫ –Ω–µ–π —Å–º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ª—é–±—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –∞ —Ç–∞–∫–∂–µ —Ç–µ, –∫–æ–º—É –í—ã –¥–∞–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n'
                                  'üîê  –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–∫—Ä—ã—Ç–æ–π, —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–¥—É.\n'
                                  , reply_markup=keyboards.room_type)
    
@comp_router.callback_query(F.data == 'create_closed_room') # closed room
async def enter_count_tasks_closed_room(callback: CallbackQuery, state: FSMContext):
    await state.update_data(room_type='closed')
    await state.set_state(Create_Room.count_tasks)
    await callback.message.answer('–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è?')
    await callback.answer()
    
@comp_router.callback_query(F.data == 'create_opened_room') # opened room
async def enter_count_tasks_opened_room(callback: CallbackQuery, state: FSMContext):
    await state.update_data(room_type='opened')
    await state.set_state(Create_Room.count_tasks)
    await callback.message.answer('–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è?')
    await callback.answer()


@comp_router.message(Create_Room.count_tasks)
async def create_room(message: Message, state: FSMContext, bot: Bot):
    try:
        try:
            count_tasks = int(message.text)
            if count_tasks <= 0:
                await message.answer('‚ùå –ß–∏—Å–ª–æ –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!')
                return
        except ValueError:
            await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3, 5, 10)!')
            return

        user_id = message.from_user.id
        room_data = await state.get_data()
        room_type = room_data.get("room_type")
        is_closed = (room_type == 'closed')

        room_id = await create_room_in_db(
            user_id=user_id,
            is_closed=is_closed  # –ü–µ—Ä–µ–¥–∞—ë–º count_tasks –≤ –ë–î
        )

        if not room_id:
            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            await state.clear()
            return

        if is_closed:
            password = get_room_password(room_id)
            print(f"[DEBUG] Created room ID: {room_id}, Key: {password}")
            message_text = (
                f'‚úÖ –í—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É –Ω–∞ *{count_tasks}* –∑–∞–¥–∞—á.\n'
                f'–ö–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: `{password}`\n\n'
                f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.'
            )
            await add_user_in_closed_room(user_id, password)
        else:
            password = get_room_password(room_id)
            print(f"[DEBUG] Created room ID: {room_id}, Key: {password}")
            message_text = (
                f'‚úÖ –í—ã —Å–æ–∑–¥–∞–ª–∏ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É –Ω–∞ *{count_tasks}* –∑–∞–¥–∞—á.\n'
                f'–ö–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: `{password}`\n\n'
                f'–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω–æ –∏–ª–∏ –ø–æ –∫–æ–¥—É.'
            )

        await message.answer(
            message_text,
            parse_mode='Markdown',
            reply_markup=keyboards.start_competition
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        await add_creator_in_room(room_id)
        await state.update_data(room_id=room_id, count_tasks=count_tasks)
        await state.set_state(Room_States.in_room)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: {e}")
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã.')
        await state.clear()
    
@comp_router.callback_query(F.data == 'join_closed_room')
async def enter_password(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Join_Closed_Room.password)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É')
    await callback.answer()


@comp_router.message(Join_Closed_Room.password)
async def join_by_password(message: Message, state: FSMContext):
    user_id = message.from_user.id
    password = message.text.strip().upper()

    room = get_room_by_key_and_status(password)

    if not room:
        await message.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å")
        return

    room_id, is_closed = room

    if join_room(user_id, room_id):
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ

        room_type = "–∑–∞–∫—Ä—ã—Ç–æ–π" if is_closed else "–æ—Ç–∫—Ä—ã—Ç–æ–π"
        await message.answer(
            f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ {room_type} –∫–æ–º–Ω–∞—Ç–µ!",
            reply_markup=keyboards.exit_competition
        )
        await notify_new_participant(room_id, user_id, message.bot)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")


@comp_router.callback_query(F.data == 'join_opened_room')
async def join_random_room(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    room_id = find_open_room()

    if not room_id:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç")
        return

    if join_room(user_id, room_id):
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        await notify_new_participant(room_id, user_id, callback.message.bot)

        await callback.message.answer(
            "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ!",
            reply_markup=keyboards.exit_competition
        )
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")