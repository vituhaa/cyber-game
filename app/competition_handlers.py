from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.handlers import *

import app.keyboards as keyboards

comp_router = Router()

class Join_Closed_Room(StatesGroup): # join the closed room
    password = State()
    
class Create_Room(StatesGroup): # create room
    room_type = State() # opened/closed
    count_tasks = State() # in room

class Room_States(StatesGroup):
    in_room = State()

# ZAGLUSHKA for creating room in db
async def create_room_in_db(user_id: int, count_task: int, is_room_closed: int) -> bool:
    # function to create closed room in db
    # and check count task in room
    # if is_room_closed == 1: room is closed
    # elif is_room_closed == 0: room is opened
    is_room_created = True
    return is_room_created
        
# ZAGLUSHKA for sending room password
async def get_room_password() -> str:
    # function to generate random password
    password = "cUtIe105"
    return password

# ZAGLUSHKA for checking password for room
async def check_password(password: str) -> bool:
    is_correct = False
    # logic to compare password
    
    if password == "cUtIe105":
        is_correct = True
    return is_correct

# ZAGLUSHKA for having people's names who are in room
async def get_room_users(room_id: int) -> list[str]:
    # function for finding people who are in room right now
    id_s = [5757254840, 612504339, 786083570, 783367128, 1159819601, 1362082185] # –í–∏–∫–∞, –°–æ–Ω—è, –ò–ª—å—è
    names = []
    for i in range (len(id_s)):
        names.append(await get_user_name_from_db(id_s[i]))
    return names

# ZAGLUSHKA add user in random room
async def add_user_in_random_room(user_id: int) -> int:
    # function for finding random room 
    all_rooms = [123, 124, 125]
    random_room = random.choice(all_rooms)
    print(f'DEBUG: {random_room}')
    return random_room

@comp_router.message(F.text == '–ù–∞—á–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ')
async def start_competition(message: Message):
    await message.answer('–£ –≤–∞—Å –µ—Å—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á. –í—Ä–µ–º—è –ø–æ—à–ª–æ!')

@comp_router.message(F.text == "–í—ã–π—Ç–∏ –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è")
async def exit_competition(message: Message):
    await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è!', reply_markup=ReplyKeyboardRemove())
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboards.main_menu)

@comp_router.message(F.text == '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ')
async def choose_comp_format(message: Message):
    await message.answer('–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n'
                         '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö.\n–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–±–æ—Ä:'
                         , reply_markup=keyboards.actions_with_room) # choosing competition format
    
@comp_router.callback_query(F.data == 'join_room')
async def choose_join_room_type(callback: CallbackQuery, state: FSMContext):
    context = 'join' # context for creating keyboard
    # await state.set_state(Room_States.in_room)
    await callback.message.answer('üîì  –ï—Å–ª–∏ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–Ω–∞—Ç—É, –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç –í–∞—Å –∫ –∏–≥—Ä–µ —Å –ª—é–±—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n'
                                  'üîê  –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ö–æ–¥–∞ –ø–æ –∫–æ–¥—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ, –≤ –∫–æ—Ç–æ—Ä—É—é –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏.\n'
                                  , reply_markup=keyboards.room_security)
    
@comp_router.callback_query(F.data == 'create_room')
async def choose_create_room_type(callback: CallbackQuery):
    context = 'create' # context for creating keyboard
    await callback.message.answer('üîì  –ï—Å–ª–∏ –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É, –∫ –Ω–µ–π —Å–º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ª—é–±—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –∞ —Ç–∞–∫–∂–µ —Ç–µ, –∫–æ–º—É –í—ã –¥–∞–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n'
                                  'üîê  –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–∫—Ä—ã—Ç–æ–π, —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–¥—É.\n'
                                  , reply_markup=keyboards.room_type)
    
@comp_router.callback_query(F.data == 'create_closed_room') # closed room
async def enter_count_tasks_closed_room(callback: CallbackQuery, state: FSMContext):
    await state.update_data(room_type='closed')
    await state.set_state(Create_Room.count_tasks)
    await callback.message.answer('–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è?')
    await callback.answer()
    
@comp_router.callback_query(F.data == 'create_opened_room') # opened room
async def enter_count_tasks_opened_room(callback: CallbackQuery, state: FSMContext):
    await state.update_data(room_type='opened')
    await state.set_state(Create_Room.count_tasks)
    await callback.message.answer('–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è?')
    await callback.answer()
   
@comp_router.message(Create_Room.count_tasks)
async def create_room(message: Message, state: FSMContext): # common function for closed and opened room
    await state.update_data(count_tasks=message.text) # save count_tasks in Create_Room field count_tasks
    user_id = message.from_user.id
    room_data = await state.get_data() # Create_Room class info
    room_type = room_data.get("room_type")
    count_tasks = room_data.get("count_tasks")
    password = ''
    access_type = 0 # opened room
    
    await state.set_state(Room_States.in_room)

    success_creation = False
    
    if room_type == 'opened':
        # ZAGLUSHKA for creating room in db
        success_creation = await create_room_in_db(user_id, count_tasks, access_type) # 0 - argument for opened room
        # ZAGLUSHKA for sending room password
        password = await get_room_password()
    
    elif room_type == 'closed':
        access_type = 1
        # ZAGLUSHKA for creating room in db
        success_creation = await create_room_in_db(user_id, count_tasks, access_type) # 1 - argument for closed room
        # ZAGLUSHKA for sending room password
        password = await get_room_password()
    
    if success_creation and access_type == 0:
        await state.update_data(in_room=True)
        # ZAGLUSHKA add user in random room
        await state.set_state(Room_States.in_room)
        await message.answer(f'‚úÖ  –í—ã —Å–æ–∑–¥–∞–ª–∏ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É –Ω–∞ {count_tasks} –∑–∞–¥–∞—á –∏ –ø–æ–∫–∞ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º.\n'
                             '–ö –≤–∞–º —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ª—é–±—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –∞ —Ç–∞–∫–∂–µ —Ç–µ, –∫–æ–º—É –≤—ã —Å–æ–æ–±—â–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reply_markup=ReplyKeyboardRemove())
        await message.answer(f'*{password}*', parse_mode='Markdown',  reply_markup=keyboards.start_competition)
        # await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboards.start_competition)
        await state.update_data(in_room=True)
        # room_id = 123
        # users_names = await get_room_users(room_id)
        # if users_names:
        #     participants = "–í –∫–æ–º–Ω–∞—Ç—É –¥–æ–±–∞–≤–∏–ª–∏—Å—å:\n" + "\n".join(users_names)
        #     await message.answer(participants)
        # else:
        #     await message.answer("–í –∫–æ–º–Ω–∞—Ç–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")
    elif success_creation and access_type == 1:
        await message.answer(f'‚úÖ  –í—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É –Ω–∞ {count_tasks} –∑–∞–¥–∞—á –∏ –ø–æ–∫–∞ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º.\n'
                             '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:', reply_markup=ReplyKeyboardRemove())
        await message.answer(f'*{password}*', parse_mode='Markdown', reply_markup=keyboards.start_competition)
        # await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboards.start_competition)
    else:
        await message.answer('‚ùå  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É.\n'
                             '–í–æ–∑–º–æ–∂–Ω–æ –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–¥–∞—á')
    await state.clear()
    # VIKA, I DON'T KNOW WHERE TO INSERT "START THE GAME" AND "EXIT THE GAME" BUTTONS AND
    # WHEN HIDE THE MAIN MENU KEYBOARD
    
@comp_router.callback_query(F.data == 'join_closed_room')
async def enter_password(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Join_Closed_Room.password)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É')
    await callback.answer()
    
@comp_router.message(Join_Closed_Room.password)
async def join_closed_room(message: Message, state: FSMContext):
    await state.update_data(password=message.text) # save password in Join_Closed_Room field password
    room_data = await state.get_data() # Join_Closed_Room class info
    password = room_data.get("password")
    
    # ZAGLUSHKA for checking password for room
    is_correct_password = await check_password(password)
    
    if is_correct_password:
        await message.answer('‚úÖ  –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ', reply_markup=ReplyKeyboardRemove())
        await message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ–∫–∏–Ω—É—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ.', reply_markup=keyboards.exit_competition)
        await state.set_state(Room_States.in_room)
        await state.update_data(in_room=True)
        room_id = 123
        users_names = await get_room_users(room_id)
        if users_names:
            participants = "–í –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:\n" + "\n".join(users_names)
            await message.answer(participants)
        else:
            await message.answer("–í –∫–æ–º–Ω–∞—Ç–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")
        await state.clear() 
        # VIKA, your logic (count players, count_tasks, ...)
    
    else:
        await message.answer('‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        await state.clear()
        await state.set_state(Join_Closed_Room.password)
       
    # VIKA, I DON'T KNOW WHERE TO INSERT "START THE GAME" AND "EXIT THE GAME" BUTTONS AND
    # WHEN HIDE THE MAIN MENU KEYBOARD
    
@comp_router.callback_query(F.data == 'join_opened_room')
async def join_opened_room(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('‚úÖ  –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ', reply_markup=ReplyKeyboardRemove())
    await callback.message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ–∫–∏–Ω—É—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ.', reply_markup=keyboards.exit_competition)
    # ZAGLUSHKA add user in random room
    await state.set_state(Room_States.in_room)
    await state.update_data(in_room=True)
    room_id = 123
    # id_s = [5757254840, 612504339, 786083570, 783367128, 1159819601, 1362082185]
    # for i in range (len(id_s)):
    #     user_id = id_s[i]
    #     room_id = add_user_in_random_room(user_id)
    users_names = await get_room_users(room_id)
    if users_names:
        participants = "–í –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:\n" + "\n".join(users_names)
        await callback.message.answer(participants)
    else:
        await callback.message.answer("–í –∫–æ–º–Ω–∞—Ç–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")
    # VIKA, your logic (count players, count_tasks, ...)