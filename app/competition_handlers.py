from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.keyboards as keyboards

comp_router = Router()

class Join_Closed_Room(StatesGroup): # join the closed room
    password = State()
    
class Create_Room(StatesGroup): # create room
    room_type = State() # opened/closed
    count_tasks = State() # in room

# ZAGLUSHKA for creating room in db
async def create_room_in_db(user_id: int, count_task: int) -> bool:
    # function to create closed room in db
    # and check count task in room
    is_room_created = True
    return is_room_created
        
# ZAGLUSHKA for sending room password
async def get_room_password() -> str:
    # function to generate random password
    password = "cUtIe105"
    return password

# ZAGLUSHKA for checking password for room
async def check_password(password: str) -> bool:
    is_correct = False
    # logic to compare password
    
    if password == "cUtIe105":
        is_correct = True
    return is_correct

@comp_router.message(F.text == '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ')
async def choose_comp_format(message: Message):
    await message.answer('–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n'
                         '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö.\n–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–±–æ—Ä:'
                         , reply_markup=keyboards.actions_with_room) # choosing competition format
    
@comp_router.callback_query(F.data == 'join_room')
async def choose_join_room_type(callback: CallbackQuery):
    context = 'join' # context for creating keyboard
    await callback.message.answer('üîì  –ï—Å–ª–∏ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É, –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç –≤–∞—Å –∫ —Å–ª—É—á–∞–π–Ω–æ–π —Å –ª—é–±—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n'
                                  'üîê  –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–∫—Ä—ã—Ç–æ–π, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n'
                                  , reply_markup=keyboards.get_room_type_keyboard(context))
    
@comp_router.callback_query(F.data == 'create_room')
async def choose_create_room_type(callback: CallbackQuery):
    context = 'create' # context for creating keyboard
    await callback.message.answer('üîì  –ï—Å–ª–∏ –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É, –∫ –Ω–µ–π —Å–º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ª—é–±—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏.\n'
                                  'üîê  –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–∫—Ä—ã—Ç–æ–π, —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –ø–∞—Ä–æ–ª—é.\n'
                                  , reply_markup=keyboards.get_room_type_keyboard(context))
    
@comp_router.callback_query(F.data == 'create_closed_room') # closed room
async def enter_count_tasks_closed_room(callback: CallbackQuery, state: FSMContext):
    await state.update_data(room_type='closed')
    await state.set_state(Create_Room.count_tasks)
    await callback.message.answer('–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è?')
    await callback.answer()
    
@comp_router.callback_query(F.data == 'create_opened_room') # opened room
async def enter_count_tasks_opened_room(callback: CallbackQuery, state: FSMContext):
    await state.update_data(room_type='opened')
    await state.set_state(Create_Room.count_tasks)
    await callback.message.answer('–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è?')
    await callback.answer()
   
@comp_router.message(Create_Room.count_tasks)
async def create_room(message: Message, state: FSMContext): # common function for closed and opened room
    await state.update_data(count_tasks=message.text) # save count_tasks in Create_Room field count_tasks
    user_id = message.from_user.id
    room_data = await state.get_data() # Create_Room class info
    room_type = room_data.get("room_type")
    count_tasks = room_data.get("count_tasks")
    password = ''
    
    # ZAGLUSHKA for creating room in db
    success_creation = await create_room_in_db(user_id, count_tasks)
    
    if room_type == 'closed':
        # ZAGLUSHKA for sending room password
        password = await get_room_password()
    
    if success_creation and password == '':
        await message.answer(f'‚úÖ  –í—ã —Å–æ–∑–¥–∞–ª–∏ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É –Ω–∞ {count_tasks} –∑–∞–¥–∞—á –∏ –ø–æ–∫–∞ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º.\n'
                             '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫–æ—Ä–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è')
    elif success_creation and password != '':
        await message.answer(f'‚úÖ  –í—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É –Ω–∞ {count_tasks} –∑–∞–¥–∞—á –∏ –ø–æ–∫–∞ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º.\n'
                             '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:\n\n'
                             f'*{password}*', parse_mode='Markdown')
    else:
        await message.answer('‚ùå  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É.\n'
                             '–í–æ–∑–º–æ–∂–Ω–æ –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–¥–∞—á')
    await state.clear()
    # VIKA, I DON'T KNOW WHERE TO INSERT "START THE GAME" AND "EXIT THE GAME" BUTTONS AND
    # WHEN HIDE THE MAIN MENU KEYBOARD
    
@comp_router.callback_query(F.data == 'join_closed_room')
async def enter_password(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Join_Closed_Room.password)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É')
    await callback.answer()
    
@comp_router.message(Join_Closed_Room.password)
async def join_closed_room(message: Message, state: FSMContext):
    await state.update_data(password=message.text) # save password in Join_Closed_Room field password
    room_data = await state.get_data() # Join_Closed_Room class info
    password = room_data.get("password")
    
    # ZAGLUSHKA for checking password for room
    is_correct_password = await check_password(password)
    
    if is_correct_password:
        await message.answer('‚úÖ  –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ')
        await state.clear() 
        # VIKA, your logic (count players, count_tasks, ...)
    
    else:
        await message.answer('‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        await state.clear()
        await state.set_state(Join_Closed_Room.password)
       
    # VIKA, I DON'T KNOW WHERE TO INSERT "START THE GAME" AND "EXIT THE GAME" BUTTONS AND
    # WHEN HIDE THE MAIN MENU KEYBOARD
    
@comp_router.callback_query(F.data == 'join_opened_room')
async def join_opened_room(callback: CallbackQuery):
    await callback.message.answer('‚úÖ  –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ')
    # VIKA, your logic (count players, count_tasks, ...)