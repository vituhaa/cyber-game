from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.handlers import *
import asyncio
from aiogram import Bot
from DataBase.DBConnect import connect
from typing import Optional


import app.keyboards as keyboards

comp_router = Router()

class Join_Closed_Room(StatesGroup): # join the closed room
    password = State()
    
class Create_Room(StatesGroup): # create room
    room_type = State() # opened/closed
    count_tasks = State() # in room

class Room_States(StatesGroup):
    in_room = State()
    
class CompetitionStates(StatesGroup):
    waiting_for_answer = State()

async def create_room_in_db(user_id: int, count_task: int, is_room_closed: bool) -> Optional[int]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
    try:
        key = generate_random_key()
        room_id = create_room(creator_id=user_id, key=key, is_closed=is_room_closed)
        return room_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: {e}")
        return None
        
async def get_room_password(room_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –ë–î"""
    with connect() as conn:
        cur = conn.cursor()
        cur.execute("SELECT key FROM Room WHERE id = ?", (room_id,))
        result = cur.fetchone()
        return result[0] if result else None

async def check_password(password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å —Ç–∞–∫–∏–º –ø–∞—Ä–æ–ª–µ–º"""
    with connect() as conn:
        cur = conn.cursor()
        cur.execute("SELECT id FROM Room WHERE key = ?", (password,))
        return cur.fetchone() is not None

async def get_room_users(room_id: int) -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã"""
    with connect() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT U.name FROM Room_Participants RP
            JOIN User U ON RP.user_id = U.user_tg_id
            WHERE RP.room_id = ?
        """, (room_id,))
        return [row[0] for row in cur.fetchall()]

async def get_room_users_id(room_id: int) -> list[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã"""
    with connect() as conn:
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM Room_Participants WHERE room_id = ?", (room_id,))
        return [row[0] for row in cur.fetchall()]

async def add_user_in_random_room(user_id: int) -> Optional[int]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–π–Ω—É—é –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É"""
    room_id = find_open_room()
    if room_id:
        join_room(user_id, room_id)
        return room_id
    return None

async def add_user_in_closed_room(user_id: int, password: str) -> Optional[int]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É –ø–æ –ø–∞—Ä–æ–ª—é"""
    with connect() as conn:
        cur = conn.cursor()
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É –ø–æ –∫–ª—é—á—É
        cur.execute("SELECT id FROM Room WHERE key = ? AND is_closed = 1", (password,))
        room = cur.fetchone()
        if room:
            room_id = room[0]
            join_room(user_id, room_id)
            return room_id
        return None

async def get_all_closed_rooms_ids() -> list[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ waiting"""
    with connect() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT id FROM Room 
            WHERE is_closed = 1 AND status = 'waiting'
        """)
        return [row[0] for row in cur.fetchall()]

async def get_all_opened_rooms_ids() -> list[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ waiting"""
    with connect() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT id FROM Room 
            WHERE is_closed = 0 AND status = 'waiting'
        """)
        return [row[0] for row in cur.fetchall()]

async def asking_for_count_tasks(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with connect() as conn:
        cur = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–¥–∞—á
        cur.execute("""
            SELECT solved_count FROM User 
            WHERE user_tg_id = ?
        """, (user_id,))
        result = cur.fetchone()
        if result:
            solved_count = result[0]
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±–æ–ª—å—à–µ –∑–∞–¥–∞—á –æ–ø—ã—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            if solved_count > 50:
                return 7
            elif solved_count > 20:
                return 5
        return 3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

async def get_room_id_for_user(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∫–æ–º–Ω–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    with connect() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT room_id FROM Room_Participants 
            WHERE user_id = ?
        """, (user_id,))
        result = cur.fetchone()
        return result[0] if result else None


async def deleting_user_from_competition(user_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"""
    with connect() as conn:
        cur = conn.cursor()
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("SELECT room_id FROM Room_Participants WHERE user_id = ?", (user_id,))
        room = cur.fetchone()
        if room:
            room_id = room[0]
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("DELETE FROM Room_Participants WHERE user_id = ? AND room_id = ?",
                        (user_id, room_id))
            conn.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            cur.execute("SELECT COUNT(*) FROM Room_Participants WHERE room_id = ?", (room_id,))
            if cur.fetchone()[0] == 0:
                # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–µ
                finish_room(room_id)
            return True
        return False

async def save_task_in_room(room_id: int, task_id: int) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –∫–æ–º–Ω–∞—Ç—É"""
    try:
        add_task_to_room(room_id, task_id)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–º–Ω–∞—Ç—É: {e}")
        return False

@comp_router.message(F.text == '–ù–∞—á–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ')
async def start_competition(message: Message, bot: Bot):
    id = message.from_user.id
    # ZAGLUSHKA for asking count_tasks from db
    count_tasks = await asking_for_count_tasks(id)
    
    # ZAGLUSHKA for getting room id from db for user in room
    room_id = await get_room_id_for_user(id)
    #room_id = 123 # !for example!
    users_in_competition = []
    users_in_competition = await get_room_users_id(room_id)

    for user_in_competition in users_in_competition:
        if user_in_competition == id:
            await bot.send_message(chat_id=user_in_competition, text = "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!", 
                                   reply_markup=ReplyKeyboardRemove())
            await bot.send_message(chat_id=user_in_competition, text="–ù–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ —É –≤–∞—Å –µ—Å—Ç—å 7 –º–∏–Ω—É—Ç. –í—Ä–µ–º—è –ø–æ—à–ª–æ!",
                                   reply_markup=keyboards.exit_competition)
        else:
            await bot.send_message(chat_id=user_in_competition, text = "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!")
            await bot.send_message(chat_id=user_in_competition, text="–ù–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ —É –≤–∞—Å –µ—Å—Ç—å 7 –º–∏–Ω—É—Ç. –í—Ä–µ–º—è –ø–æ—à–ª–æ!")

    await run_competition_tasks(bot, room_id, count_tasks, users_in_competition) # print tasks
    """ for curr_index in range(1, count_tasks + 1):
        task_number = f"–ó–∞–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä {curr_index}"
        for user_in_competition in users_in_competition:
            await bot.send_message(chat_id=user_in_competition, text=task_number)
        await asyncio.sleep(5)
            
    for user_in_competition in users_in_competition:
        await bot.send_message(chat_id=user_in_competition, text="–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") """
    # await state.clear()

async def run_competition_tasks(bot: Bot, room_id: int, count_tasks: int, users: list[int]):
    for curr_index in range(1, count_tasks + 1):
        task_number = f"üìù –ó–∞–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä {curr_index}"
        task = get_random_task()
        task_id, title, type_id, difficulty, description, question, correct_answer, solution = task[:8]
        
        # ZAGLUSHKA for saving random task in room
        success_saving = await save_task_in_room(room_id, task_id)

        task_text = (
            f"üìå *{title}*\n\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
            f"‚ùì *–í–æ–ø—Ä–æ—Å:* {question}\n\n"
            f"(–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)"
        )
        for user_id in users:
            await bot.send_message(user_id, task_number)
            await bot.send_message(user_id, task_text, parse_mode='Markdown')
            #state = Dispatcher.get_current().fsm.get_context(bot=bot, chat_id=user_id, user_id=user_id)
            #await state.set_state(CompetitionStates.waiting_for_answer)
        # waiting for 7 minutes (420 seconds) or while all members answer
        await asyncio.sleep(5)
    
    await show_final_results(bot, room_id, users)
      

async def get_last_task_in_room_from_db(room_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –∫–æ–º–Ω–∞—Ç–µ"""
    task_id = get_last_task_in_room(room_id)
    if task_id:
        with connect() as conn:
            cur = conn.cursor()
            cur.execute("SELECT * FROM Task WHERE id = ?", (task_id,))
            return cur.fetchone()
    return None

async def increase_score(user_id: int, room_id: int, score_delta: int = 100):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ"""
    try:
        update_player_score(user_id, room_id, score_delta)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        return False

async def notify_room_members(bot: Bot, room_id: int, message: str, exclude_user_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã"""
    user_ids = await get_room_users_id(room_id)
    for user_id in user_ids:
        if user_id != exclude_user_id:
            try:
                await bot.send_message(user_id, message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
""" @comp_router.message()
async def handle_competition_answer(message: Message):
    user_id = message.from_user.id
    room_id = await get_room_id_for_user(user_id)
    if room_id is not None:
        user_answer = message.text
    
        # ZAGLUSHKA for getting the last task in room
        last_task = await get_last_task_in_room_from_db(room_id)
        
        if last_task is None:
            await message.answer("‚õîÔ∏è  –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É!")
            return

        last_task_id = last_task[0]
        if check_answer(last_task_id, user_answer):
            # ZAGLUSHKA for increasing score for player
            success = await increase_score(user_id, room_id)
            await message.answer("‚úÖ  –í–µ—Ä–Ω–æ!")
        else:
            await message.answer("‚ùå  –ù–µ–≤–µ—Ä–Ω–æ")
    else:
        return """

# ZAGLUSHKA for formation of the rating table
async def get_names_rating(room_id: int, users: list[int]) -> dict[int: list[str]]:
    # function from db, which return score by user id
    # EXAMPLE for output format and processing:
    # users = [5757254840, 612504339]
    score_table = {}
    score_table_ids = {}
    for user in users:
        # function from db, which return score by user_id
        user_score = random.randint(4, 5) # !for example!
        user_name = await get_user_name_from_db(user)
        if user_score not in score_table:
            score_table[user_score] = []
            score_table_ids[user_score] = []
            score_table[user_score].append(user_name)
            score_table_ids[user_score].append(user)
        else:
            score_table[user_score].append(user_name)
            score_table_ids[user_score].append(user)
    
    sorted_score_table = dict(sorted(score_table.items(), reverse=True))
    sorted_score_table_ids = dict(sorted(score_table_ids.items(), reverse=True))
    return sorted_score_table, sorted_score_table_ids

async def show_final_results(bot: Bot, room_id: int, users: list[int]):
    # ZAGLUSHKA for formation of the rating table
    users_rating = {} # dict score_1: [name_1, name_2, ...], score_2: [name_3], score_3: [name_4], ...
    users_rating, rating_ids = await get_names_rating(room_id, users)
    
    text_results = ''
    place = 1
    emoji = ''

    points = 500
    first_plase_score = 0
    for score in users_rating:
        if place == 1:
            emoji = 'ü•á'
            # ZAGLUSHKA for add +point to winners
            # for example for only 1st place
            for id in rating_ids[score]:
                update_user_score(user_tg_id=id, score_delta=points, increment_solved=False)
            first_place_score = score
        elif place == 2:
            emoji = 'ü•à'
        elif place == 3:
            emoji = 'ü•â'
        else:
            emoji = 'üîπÔ∏è'
        place_users = ", ".join(users_rating[score])
        place_info = f'{emoji}  {place} –º–µ—Å—Ç–æ: {place_users}\n\n'
        text_results += place_info
        place += 1
    
    for user_id in users:
        await bot.send_message(user_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:")
        await bot.send_message(user_id, text_results)
        if user_id in rating_ids[first_place_score]:
            await bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ {points} –±–∞–ª–ª–æ–≤!")


@comp_router.message(F.text == "–í—ã–π—Ç–∏ –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è")
async def exit_competition(message: Message, state: FSMContext):
    user_id = message.from_user.id
    room_id = await get_room_id_for_user(user_id)

    if room_id:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        remove_participant_from_room(room_id, user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        participants_count = get_room_participant_count(room_id)

        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è!',
                             reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                             reply_markup=keyboards.main_menu)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if participants_count > 0:
            user_name = await get_user_name_from_db(user_id)
            await notify_room_members(
                bot=message.bot,
                room_id=room_id,
                message=f"–£—á–∞—Å—Ç–Ω–∏–∫ {user_name} –ø–æ–∫–∏–Ω—É–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"
            )
    else:
        await message.answer('–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ')

    await state.clear()

@comp_router.message(F.text == '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ')
async def choose_comp_format(message: Message):
    await message.answer('–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n'
                         '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö.\n–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–±–æ—Ä:'
                         , reply_markup=keyboards.actions_with_room) # choosing competition format
    
@comp_router.callback_query(F.data == 'join_room')
async def choose_join_room_type(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üîì  –ï—Å–ª–∏ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–Ω–∞—Ç—É, –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç –í–∞—Å –∫ –∏–≥—Ä–µ —Å –ª—é–±—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n'
                                  'üîê  –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ö–æ–¥–∞ –ø–æ –∫–æ–¥—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ, –≤ –∫–æ—Ç–æ—Ä—É—é –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏.\n'
                                  , reply_markup=keyboards.room_security)
    
@comp_router.callback_query(F.data == 'create_room')
async def choose_create_room_type(callback: CallbackQuery):
    await callback.message.answer('üîì  –ï—Å–ª–∏ –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É, –∫ –Ω–µ–π —Å–º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ª—é–±—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –∞ —Ç–∞–∫–∂–µ —Ç–µ, –∫–æ–º—É –í—ã –¥–∞–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n'
                                  'üîê  –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–∫—Ä—ã—Ç–æ–π, —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–¥—É.\n'
                                  , reply_markup=keyboards.room_type)
    
@comp_router.callback_query(F.data == 'create_closed_room') # closed room
async def enter_count_tasks_closed_room(callback: CallbackQuery, state: FSMContext):
    await state.update_data(room_type='closed')
    await state.set_state(Create_Room.count_tasks)
    await callback.message.answer('–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è?')
    await callback.answer()
    
@comp_router.callback_query(F.data == 'create_opened_room') # opened room
async def enter_count_tasks_opened_room(callback: CallbackQuery, state: FSMContext):
    await state.update_data(room_type='opened')
    await state.set_state(Create_Room.count_tasks)
    await callback.message.answer('–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è?')
    await callback.answer()


@comp_router.message(Create_Room.count_tasks)
async def create_room(message: Message, state: FSMContext, bot: Bot):
    try:
        count_tasks = int(message.text)
        if count_tasks <= 0:
            raise ValueError
    except ValueError:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–¥–∞—á (–±–æ–ª—å—à–µ 0)')
        return

    user_id = message.from_user.id
    room_data = await state.get_data()
    room_type = room_data.get("room_type")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –ë–î
    room_id = await create_room_in_db(user_id, count_tasks, room_type == 'closed')
    if not room_id:
        await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã
    password = await get_room_password(room_id)

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    room_type_text = "–æ—Ç–∫—Ä—ã—Ç—É—é" if room_type == 'opened' else "–∑–∞–∫—Ä—ã—Ç—É—é"
    await message.answer(
        f'‚úÖ –í—ã —Å–æ–∑–¥–∞–ª–∏ {room_type_text} –∫–æ–º–Ω–∞—Ç—É –Ω–∞ {count_tasks} –∑–∞–¥–∞—á.\n'
        f'–ö–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: *{password}*',
        parse_mode='Markdown',
        reply_markup=keyboards.start_competition
    )

    await state.update_data(room_id=room_id, in_room=True)
    await state.set_state(Room_States.in_room)
    
@comp_router.callback_query(F.data == 'join_closed_room')
async def enter_password(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Join_Closed_Room.password)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É')
    await callback.answer()


@comp_router.message(Join_Closed_Room.password)
async def join_closed_room(message: Message, state: FSMContext, bot: Bot):
    password = message.text.strip()
    user_id = message.from_user.id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è
    room_id = await add_user_in_closed_room(user_id, password)

    if room_id:
        await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!',
                             reply_markup=keyboards.exit_competition)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await get_room_users(room_id)
        if participants:
            participants_text = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã:\n" + "\n".join(participants)
            await message.answer(participants_text)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        user_name = await get_user_name_from_db(user_id)
        await notify_room_members(bot, room_id, f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user_name}")

        await state.update_data(room_id=room_id, in_room=True)
        await state.set_state(Room_States.in_room)
    else:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        await state.set_state(Join_Closed_Room.password)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è


@comp_router.callback_query(F.data == 'join_opened_room')
async def join_opened_room(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    room_id = await add_user_in_random_room(user_id)

    if room_id:
        await callback.message.answer('‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ!',
                                      reply_markup=keyboards.exit_competition)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        with connect() as conn:
            cur = conn.cursor()
            cur.execute("""
                SELECT COUNT(*) FROM Room_Participants 
                WHERE room_id = ? AND user_id != ?
            """, (room_id, user_id))
            other_participants = cur.fetchone()[0]

        if other_participants > 0:
            participants = await get_room_users(room_id)
            await callback.message.answer(f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã:\n{', '.join(participants)}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            user_name = await get_user_name_from_db(user_id)
            await notify_room_members(bot, room_id, f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user_name}", user_id)
        else:
            await callback.message.answer("–í—ã –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –∫–æ–º–Ω–∞—Ç–µ!")

        await state.update_data(room_id=room_id, in_room=True)
        await state.set_state(Room_States.in_room)
    else:
        await callback.message.answer('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é!')
        await callback.answer()